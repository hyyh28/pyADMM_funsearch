{"sample_order": 3, "function": "def igc(A, C, lambd, opts):\n    tol = opts.get('tol', 1e-8)\n    max_iter = opts.get('max_iter', 500)\n    rho = opts.get('rho', 1.1)\n    mu = opts.get('mu', 1e-4)\n    max_mu = opts.get('max_mu', 1e10)\n    DEBUG = opts.get('DEBUG', 0)\n    tau_incr = opts.get('tau_incr', 2)\n    tau_decr = opts.get('tau_decr', 2)\n\n    C = np.abs(C)\n    d, n = A.shape\n\n    L = np.zeros((d, n))\n    S = np.zeros_like(L)\n    Z = np.zeros_like(L)\n    Y1 = np.zeros_like(L)\n    Y2 = np.zeros_like(L)\n\n    for iter in range(max_iter):\n        Lk = L.copy()\n        Sk = S.copy()\n        Zk = Z.copy()\n\n        # First super block {L, S}\n        L, nuclearnormL = prox_nuclear(Z - Y2 / mu, 1 / mu)\n        S = prox_l1(-Z + A - Y1 / mu, C * (lambd / mu))\n\n        # Second super block {Z}\n        Z = project_box((-S + A + L + (Y2 - Y1) / mu) / 2, 0, 1)\n\n        dY1 = Z + S - A\n        dY2 = L - Z\n        chgL = np.max(np.abs(Lk - L))\n        chgS = np.max(np.abs(Sk - S))\n        chgZ = np.max(np.abs(Zk - Z))\n        chg = np.max([chgL, chgS, chgZ, np.max(np.abs(dY1)), np.max(np.abs(dY2))])\n\n        if DEBUG:\n            if iter == 0 or iter % 10 == 0:\n                obj = nuclearnormL + lambd * np.sum(C * np.abs(S))\n                err = np.sqrt(np.linalg.norm(dY1, 'fro')**2 + np.linalg.norm(dY2, 'fro')**2)\n                print(f'iter {iter + 1}, mu={mu}, rho={rho}, obj={obj}, err={err}')\n\n        if chg < tol:\n            break\n\n        # Update rho dynamically\n        s_norm = np.sqrt(np.linalg.norm(dY1, 'fro')**2 + np.linalg.norm(dY2, 'fro')**2)\n        r_norm = mu * np.sqrt(np.linalg.norm(L - Z, 'fro')**2 + np.linalg.norm(Z + S - A, 'fro')**2)\n\n        if r_norm > tau_incr * s_norm:\n            rho *= tau_incr\n        elif s_norm > tau_decr * r_norm:\n            rho /= tau_decr\n\n        Y1 += mu * dY1\n        Y2 += mu * dY2\n        mu = min(rho * mu, max_mu)\n\n    obj = nuclearnormL + lambd * np.sum(C * np.abs(S))\n    err = np.sqrt(np.linalg.norm(dY1, 'fro')**2 + np.linalg.norm(dY2, 'fro')**2)\n\n    return L, S, obj, err, iter\n\n", "score": null}