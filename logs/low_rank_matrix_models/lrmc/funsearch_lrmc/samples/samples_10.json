{"sample_order": 10, "function": "def lrmc(MM, omega, opts):\n    tol = opts.get('tol', 1e-8)\n    max_iter = opts.get('max_iter', 500)\n    mu = opts.get('mu', 1e-4)\n    max_mu = opts.get('max_mu', 1e10)\n    DEBUG = opts.get('DEBUG', 0)\n\n    d, n = MM.shape\n    M = np.zeros((d, n))\n    M[omega] = MM[omega]\n    X = np.zeros((d, n))\n    E = np.zeros((d, n))\n    Y = np.zeros((d, n))\n    rho = 1.1\n\n    def update_rho(rho, dY, tol):\n        norm_dY = np.linalg.norm(dY, 'fro')\n        if norm_dY > tol:\n            rho *= 1.1\n        elif norm_dY < tol:\n            rho *= 0.9\n        return rho\n\n    for iter in range(max_iter):\n        Xk = X.copy()\n        Ek = E.copy()\n\n        # Update X\n        X, nuclearnormX = prox_nuclear(-(E - M + Y / mu), 1 / mu)\n\n        # Update E\n        E = -(X - M + Y / mu)\n        E[omega] = 0\n\n        dY = X + E - M\n        chgX = np.max(np.abs(Xk - X))\n        chgE = np.max(np.abs(Ek - E))\n        chg = np.max([chgX, chgE, np.max(np.abs(dY))])\n\n        if DEBUG and (iter == 1 or iter % 10 == 0):\n            obj = nuclearnormX\n            err = np.linalg.norm(dY, 'fro')\n            print(f'iter {iter + 1}, mu={mu}, rho={rho}, obj={obj}, err={err}')\n\n        if chg < tol:\n            break\n\n        Y += mu * dY\n        mu = min(rho * mu, max_mu)\n        rho = update_rho(rho, dY, tol)\n\n    obj = nuclearnormX\n    err = np.linalg.norm(dY, 'fro')\n    return X, obj, err, iter\n\n", "score": -20.0}